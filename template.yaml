AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  postgres-lambda-trigger

  Sample SAM Template for postgres-lambda-trigger
Parameters:
  DBNAMEPARAM:
    Description: The DB Name
    Type: String
    Default: demo
  DBUSERPARAM:
    Description: The DB User Name
    Type: String
    Default: master

Globals:
  Function:
    Environment: 
      Variables:
        JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
        DB_MASTER_SECRET_ARN: !GetAtt ServerlessV2Cluster.MasterUserSecret.SecretArn
        DB_ENDPOINT: !GetAtt ServerlessV2Cluster.Endpoint.Address
        DB_NAME: !Ref DBNAMEPARAM
    CodeUri: .
    Architectures:
        - arm64
    Runtime: java11
    Timeout: 20
    MemorySize: 1024

Resources:
  RDSLambdaRole:
        Type: AWS::IAM::Role
        Properties:
            Description:  Allow RDS to call Lambda Functions
            AssumeRolePolicyDocument:
                Version: 2012-10-17 
                Statement:
                    - Effect: Allow
                      Principal:
                        Service:
                          - rds.amazonaws.com
                      Action:
                        - sts:AssumeRole
            ManagedPolicyArns:
              - arn:aws:iam::aws:policy/service-role/AWSLambdaRole   
      
      
  ServerlessV2Cluster:
    Type: 'AWS::RDS::DBCluster'
    DeletionPolicy: Delete
    Properties:
      Engine: aurora-postgresql
      Port: 5432
      EngineVersion: 13.9
      DatabaseName: !Ref DBNAMEPARAM
      ManageMasterUserPassword: true
      MasterUsername: !Ref DBUSERPARAM
      DBSubnetGroupName: !Ref DBSubnetGroup
      VpcSecurityGroupIds:
        - !Ref RDSSecurityGroup
      ServerlessV2ScalingConfiguration:
        MinCapacity: 0.5
        MaxCapacity: 1.0
      AssociatedRoles:
        - FeatureName: Lambda
          RoleArn: !GetAtt RDSLambdaRole.Arn
        
  ServerlessInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: aurora-postgresql
      DBClusterIdentifier: !Ref ServerlessV2Cluster
      DBInstanceClass: db.serverless
      PubliclyAccessible: true
        
  ApiGateway:
        Type: AWS::Serverless::HttpApi
        Properties:
            CorsConfiguration: true
            
  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-Hello
      Description: Displays Sample Postgres Table
      Handler: helloworld.App
      Policies: 
        - !Ref SecretsPolicy
      Events:
        HelloWorld:
          Type: HttpApi
          Properties:
            Path: /
            Method: get
            ApiId: !Ref ApiGateway
            
  DBFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-DBScripting
      Description: Performs the DB Scripting after DB creation
      Handler: helloworld.DBScripting
      Timeout: 120
      EventInvokeConfig:  # Ensure this lambda errors quickly
        MaximumEventAgeInSeconds: 180
        MaximumRetryAttempts: 1
      Policies: 
        - !Ref SecretsPolicy
            
  
  DBCustom:
    Type: Custom::DBScripting
    DependsOn: ServerlessInstance  # Make sure the writer instance is done before we run DB Scripts
    Properties:
        ServiceToken: !GetAtt DBFunction.Arn

  SecretsPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
        Description: Allow Lambdas to access the RDS Managed Secret
        PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                  - 'secretsmanager:DescribeSecret'
                Resource: !GetAtt ServerlessV2Cluster.MasterUserSecret.SecretArn
    
    
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.20.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.20.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: 10.20.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Subnet (AZ2)

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: !Sub ${AWS::StackName} DB Subnet group
      SubnetIds: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} DB Subnet group
  
  RDSSecurityGroup:
     Type: AWS::EC2::SecurityGroup
     Properties:
       GroupDescription: !Sub ${AWS::StackName} DB Security Group
       VpcId: !Ref VPC
       SecurityGroupIngress:  # Allow all Postgres Traffic in
         - IpProtocol: tcp
           FromPort: 5432
           ToPort: 5432
           CidrIp: 0.0.0.0/0 

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2


Outputs:
  ApiEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !GetAtt ApiGateway.ApiEndpoint
  DBEndpoint:
    Description: "DB Endpoint"
    Value: !GetAtt ServerlessV2Cluster.Endpoint.Address
     
